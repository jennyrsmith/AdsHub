// Load environment variables from .env file
import 'dotenv/config';

import express from 'express';
import { pool } from './lib/db.js';
import path from 'path';
import { fileURLToPath } from 'url';

const app = express();

// Get __dirname in ES modules (not defined by default)
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// DigitalOcean App Platform injects PORT — default to 3000 locally
const PORT = Number(process.env.PORT || 3000);

// Let Express know it's behind a reverse proxy (e.g., App Platform)
app.set('trust proxy', true);

// ================================
// ✅ Health + Readiness Endpoints
// ================================

// Health probe — does the server respond?
app.get('/healthz', (_req, res) => {
  res.json({
    ok: true,
    service: 'adshub-api',
    env: process.env.NODE_ENV || 'dev'
  });
});

// Readiness probe — is the DB connection working?
app.get('/readyz', async (_req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({ ok: true });
  } catch (err) {
    res.status(503).json({
      ok: false,
      reason: 'db-error',
      error: String(err?.message || err)
    });
  }
});

// Optional root for testing
app.get('/', (_req, res) => res.send('adsHub API is up'));


// ================================
// ✅ Serve Frontend (from ui/dist)
// ================================

// Serve static assets like JS, CSS, images
app.use(express.static(path.join(__dirname, 'ui', 'dist')));

// Catch-all: serve index.html for SPA routing (e.g. /login, /dashboard)
app.get('*', (_req, res) => {
  res.sendFile(path.join(__dirname, 'ui', 'dist', 'index.html'));
});


// ================================
// ✅ Start the Server
// ================================
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`[start] adshub-api listening on 0.0.0.0:${PORT} (${process.env.NODE_ENV || 'dev'})`);
});


// ================================
// ✅ Graceful Shutdown Handling
// ================================
const shutdown = (sig) => () => {
  console.log(`[${sig}] shutting down...`);
  server.close(() => {
    pool.end().catch(() => {}); // Ensure DB pool closes
    process.exit(0);
  });
};

process.on('SIGINT', shutdown('SIGINT'));
process.on('SIGTERM', shutdown('SIGTERM'));